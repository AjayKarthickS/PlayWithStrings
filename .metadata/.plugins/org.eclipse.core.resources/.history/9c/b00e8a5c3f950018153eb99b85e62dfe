package myPackage;

import java.util.Scanner;

public class LongestSubStringSequence {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		System.out.println("Enter the String");
		char[] str = in.nextLine().toCharArray();
		//char[] str = in.nextLine().toLowerCase().toCharArray();  -- Use this if case insensitive
		printLongestSubStringSequence(str);
		in.close();
	}
	private static void printLongestSubStringSequence(char[] str){
		int n = str.length;
		int[][] result = new int[n][n];
		for(int l = 1; l <= n; l++) {
			for(int start = 0; start <= n - l; start++) {
				int end = start + l -1;
				if(start == end)
					result[start][end] = 1;
				else if (str[start] == str[end])
					result[start][end] = 2 + result[start+1][end-1];
				else
					result[start][end] = Math.max(result[start][end-1], result[start+1][end]);
			}
		}
		int i = 0, j = n-1;
		System.out.println("Longest SubString Length : "+ result[i][j]);
		char[] longestSubStr =  new char[result[i][j]];
		int subStrStart = 0, subStrEnd = longestSubStr.length-1;
		while(i != j){
			int currMax = result[i][j];
			int prevMax = Math.max(result[i][j-1], result[i+1][j]);
			if(prevMax != currMax){
				longestSubStr[subStrStart++] = str[i];
				longestSubStr[subStrEnd--] = str[j];
			}
			int prevI = i;
			int prevJ = j;
				i = result[prevI+1][prevJ] >= result[prevI][prevJ-1] ? prevI+1 : prevI;
				j = result[prevI+1][prevJ] <= result[prevI][prevJ-1] ? prevJ-1 : prevJ;
		}
		longestSubStr[i] = str[i];
		for(int x = 0;  i < longestSubStr.length; x++)
			System.out.print(longestSubStr[x]);
	}
	/*private static void printResult(int[][] result){
		for(int i = 0;  i < result.length; i++){
			for(int j = 0; j < result[i].length; j++){
				System.out.print(result[i][j]+" ");
			}
			System.out.println();
		}
	}*/
}
